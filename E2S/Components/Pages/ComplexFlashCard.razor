@page "/flashcard/complex"
@rendermode InteractiveServer

<div class="flashcard-container">

    <div class="flashcard" >
        <div class="text-container">
            <div class="phrase">@englishPhrase</div>
            <div class="description">@description.</div>
        </div>
    </div>
  
    <div class="input-container">
        <div class="answer-container">
            @* <label for="answer">Answer</label> *@
            <input placeholder="Type your translation..." disabled=@isRevealed @oninput="UpdateUserAnswer" @onkeydown="RevealAnswerFromKeyPress" @bind="userAnswer" class="answer-input @revealClass" spellcheck="false" type="text" id="answer" name="answer" maxlength="255" autocomplete="off"/>
        </div>
        <div class="submit-container">
            <button disabled=@isRevealed @onclick="RevealAnswerCard" class="verify-btn @revealClass">Verify</button>
        </div>        
        @* <p>You typed: @userAnswer</p> *@
    </div>
   
    <div class="flashcard-answer @revealClass @revealColorClass">
        <div class="phrase-answer @revealDiffButtons">@(DisplayFormattedAnswer())</div>
    </div>
    <div class="difficulty-container @revealClass">
        <button disabled=@(DisableDiffButtons())   @onclick="EnableVerifyButton" class="easy-btn @revealDiffButtons">Easy</button>
        <button disabled=@(DisableDiffButtons())   @onclick="EnableVerifyButton" class="medium-btn @revealDiffButtons">Medium</button>
        <button disabled=@(DisableDiffButtons())  @onclick="EnableVerifyButton" class="hard-btn @revealDiffButtons">Hard</button>
    </div>

</div>


@code
{
    private string description = "Adj";
    private string englishPhrase = "Hello Sir?";
    private string spanishPhraseAnswer = "¡Hola Señor!";
    private string revealClass => isRevealed ? "reveal" : "";
    private string revealDiffButtons => isRevealed? "" : "reveal";
    private bool isCorrect = false;

    // Public Bindings
    public string userAnswer { get; set; } = "";
    public string revealColorClass => isCorrect ? "correct" : "wrong";
    public bool isRevealed { get; set; } = false;


    // Reveal flashcard on button press
    private void RevealAnswerCard()
    {
        isRevealed = true;
        DisplayFormattedAnswer();
        ClearUserInput();
    }

    // Reveal flashcard pressing "Enter" in input box
    private void RevealAnswerFromKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            isRevealed = true;
            DisplayFormattedAnswer();
            ClearUserInput();
        }
    }

    private bool DisableDiffButtons()
    {
        return !isRevealed;
    }

    private void EnableVerifyButton()
    {
        isRevealed = false;
    }

    // Update user answer on input
    private void UpdateUserAnswer(ChangeEventArgs e)
    {
        userAnswer = e.Value?.ToString() ?? string.Empty;
    }

    private void ClearUserInput()
    {
        userAnswer = "";
    }

    // Filters the string to only contain spaces and letters
    private string FilterString(string str)
    {
        string newStr = new string(str.Where(c => char.IsLetter(c) || c == ' ').ToArray());
        Console.WriteLine(newStr);
        return newStr;
    }

    private MarkupString DisplayFormattedAnswer()
    {
        var result = "";
        string userInput = FilterString(userAnswer);
        string actualAnswer = spanishPhraseAnswer;
        int minLength = Math.Min(userInput.Length, actualAnswer.Length);
        int answerLength = actualAnswer.Length; 

        Console.WriteLine(spanishPhraseAnswer);
        Console.WriteLine(userInput);

        Dictionary<char, char> accentMap = 
            new Dictionary<char, char>()
                {
                    {'a', 'á'},
                    {'e', 'é'},
                    {'i', 'í'},
                    {'o', 'ó'},
                    {'u', 'ú'},
                    {'n', 'ñ'},
                };

        int correctIndex = 0, userIndex = 0;

        // While user index is in range and answer index is in range
        while (userIndex < minLength && correctIndex < answerLength)
        {
            // If correct answer character is not a letter, append in black
            if (!char.IsLetter(actualAnswer[correctIndex]) && actualAnswer[correctIndex] != ' ')
            {
                result += $"<span style='color: black;'>{actualAnswer[correctIndex]}</span>";
                correctIndex++;
                continue;
            }

            // If we get to the end of the correct answer early break the loop
            if (correctIndex >= actualAnswer.Length)
                break;

            // If correct answer has a space, append in black
            if(actualAnswer[correctIndex] == ' ')
            {
                result += $"<span style='color: black;'>&nbsp;</span>";
            }
            // Else if the characters match, append in green
            else if (char.ToLower(userInput[userIndex]) == char.ToLower(actualAnswer[correctIndex]))
            {
                result += $"<span style='color: green;'>{actualAnswer[correctIndex]}</span>";
            }
            // Else if it is an accented character
            else if (accentMap.ContainsKey(char.ToLower(userInput[userIndex])))
            {
                // If it is an english letter without the accent but in the right place, append correct character in orange
                if (accentMap[userInput[userIndex]] == actualAnswer[correctIndex])
                    result += $"<span style='color: orange;'>{actualAnswer[correctIndex]}</span>";
                // Else the character is wrong, and append correct character in red
                else
                    result += $"<span style='color: red;'>{actualAnswer[correctIndex]}</span>";
            }
            // Otherwise character is incorrect, append the correct one in red
            else
            {
                result += $"<span style='color: red;'>{actualAnswer[correctIndex]}</span>";
            }

            correctIndex++;
            userIndex++;
        }

        // If the correct answer is longer than the user answer
        if (actualAnswer.Length > userInput.Length)
        {
            // While in bounds of the correct answer array
            while (correctIndex < actualAnswer.Length)
            {
                // If there is a space, append the html style space in black
                if(actualAnswer[correctIndex] == ' ')
                {
                    result += $"<span style='color: black;'>&nbsp;</span>";
                }
                // Else if the character is not a letter, append in black
                else if (!char.IsLetter(actualAnswer[correctIndex]))
                {
                    result += $"<span style='color: black;'>{actualAnswer[correctIndex]}</span>";
                    correctIndex++; // jump to next char
                    continue;
                }
                // Otherwise, the remaining characters are missing, therefore incorrect, append them in red
                else
                {
                    result += $"<span style='color: red;'>{actualAnswer[correctIndex]}</span>";
                }

                correctIndex++;
            }
        }


        // While there are remaining user input characters
        while (userIndex < userInput.Length)
        {
            // Append underline space in purple to correct answer
            if(userInput[userIndex] == ' ')
                result += $"<span style='color: purple; opacity: 50%;'><u>&nbsp;</u></span>";
            // Otherwise it is a letter append in purple
            else
                result += $"<span style='color: purple; opacity: 50%;'>{userInput[userIndex]}</span>";

            userIndex++;
        }


        return new MarkupString(result);
    }

    private MarkupString GetFormattedAnswer()
    {
        var result = "";
        var length = Math.Max(spanishPhraseAnswer.Length, userAnswer.Length);
        string userAnswerLower = userAnswer;
        string actualAnswerLower = spanishPhraseAnswer;

        for (int i = 0; i < length; i++)
        {
            if (i < userAnswerLower.Length && i < actualAnswerLower.Length)
            { 

                if (char.ToLower(userAnswerLower[i]) == char.ToLower(actualAnswerLower[i]))
                {
                    result += $"<span style='color: green;'>{actualAnswerLower[i]}</span>";
                }
                else
                {
                    result += $"<span style='color: red;'><u>{actualAnswerLower[i]}</u></span>";
                }
            }
            else if (i < userAnswerLower.Length)
            {
                result += $"<span style='color: purple;'><u>{actualAnswerLower[i]}</u></span>";
            }
            else if (actualAnswerLower[i] == ' ')
            {
                result += $"<span style='color: green;'>&nbsp;</span>";
            }
            else if (!char.IsLetter(actualAnswerLower[i]))
            {
                result += $"<span style='color: black;'><u>{actualAnswerLower[i]}</u></span>";
            }
            else
            {
                result += $"<span style='color: red;'><u>{actualAnswerLower[i]}</u></span>";
            }

        }
        
        return new MarkupString(result);
    }

}
