@page "/flashcard/complex"
@rendermode InteractiveServer

<div class="flashcard-container">

    <div class="flashcard" >
        <div class="text-container">
            <div class="phrase">@englishPhrase</div>
            <div class="description">@description.</div>
        </div>
    </div>
  
    <div class="input-container">
        <div class="answer-container">
            <label for="answer">Answer</label>
            <input @oninput="UpdateUserAnswer" @onkeydown="RevealAnswerFromKeyPress" @bind="userAnswer" class="answer-input" spellcheck="false" type="text" id="answer" name="answer" maxlength="255" autocomplete="off"/>
        </div>
        <div class="submit-container">
            <button @onclick="RevealAnswerCard" class="verify-btn">Verify</button>
            <p>You typed: @userAnswer</p>
        </div>
        @* <div class="submit-container">
            <button @onclick="FilterString" class="verify-btn">Verify</button>
            <p>You typed: @userAnswer</p>
        </div> *@
        
    </div>
   
    <div class="flashcard-answer @revealClass @revealColorClass">
        <div class="phrase-answer">@(DisplayFormattedAnswer())</div>
    </div>

</div>


@code
{
    private string description = "Adj";
    private string englishPhrase = "Hello, how are you?";
    private string spanishPhraseAnswer = "Hola, ¿Cómo estás?";
    private string revealClass => isRevealed ? "reveal" : "";
    private bool isCorrect = false;

    // Public Bindings
    public string userAnswer { get; set; } = "";
    public string revealColorClass => isCorrect ? "correct" : "wrong";
    public bool isRevealed { get; set; } = false;


    private void RevealAnswerCard()
    {
        @* CheckAnswerMatchResult(); *@
        isRevealed = true;
        ClearUserInput();

    }

    private void RevealAnswerFromKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            @* CheckAnswerMatchResult(); *@
            isRevealed = true;
            ClearUserInput();
        }
    }

    @* private void CheckAnswerMatchResult()
    {
        if (String.Equals(userAnswer.Trim(), spanishPhraseAnswer, StringComparison.OrdinalIgnoreCase))
            isCorrect = true;
        else
            isCorrect = false;
    } *@

    private void UpdateUserAnswer(ChangeEventArgs e)
    {
        userAnswer = e.Value?.ToString() ?? string.Empty;
    }

    private void ClearUserInput()
    {
        userAnswer = "";
    }

    // Filters the string to only contain spaces and letters
    private string FilterString(string str)
    {
        string newStr = new string(str.Where(c => char.IsLetter(c) || c == ' ').ToArray());
        Console.WriteLine(newStr);
        return newStr;
    }

    private MarkupString DisplayFormattedAnswer()
    {
        var result = "";
        string userInput = userAnswer;
        string actualAnswer = spanishPhraseAnswer;
        int minLength = Math.Min(userInput.Length, actualAnswer.Length); 
        Console.WriteLine(userInput.Length);
        Console.WriteLine(actualAnswer.Length);

       int correctIndex = 0, userIndex = 0;

        while (correctIndex < actualAnswer.Length)
        {
            char correctChar = actualAnswer[correctIndex];

            // If the character is a letter, compare with the user's answer
            if (char.IsLetter(correctChar))
            {
                if (userIndex < userAnswer.Length && char.ToUpper(correctChar) == char.ToUpper(userAnswer[userIndex]))
                {
                    result += $"<span style='color:green'>{correctChar}</span>";
                }
                else
                {
                    result += $"<span style='color:red'>{correctChar}</span>";
                }
                userIndex++;
            }
            // If the character is not a letter, just add it to the result
            else
            {
                if (correctChar == ' ')
                {
                    result += "&nbsp;";
                }
                else
                {
                    result += correctChar;
                }
            }
            correctIndex++;
        }

        // Handle any remaining user input if necessary
        while (userIndex < userAnswer.Length)
        {
            result += $"<span style='color:red'>{userAnswer[userIndex]}</span>";
            userIndex++;
        }

        return new MarkupString(result);
    }

    private MarkupString GetFormattedAnswer()
    {
        var result = "";
        var length = Math.Max(spanishPhraseAnswer.Length, userAnswer.Length);
        string userAnswerLower = userAnswer;
        string actualAnswerLower = spanishPhraseAnswer;

        for (int i = 0; i < length; i++)
        {
            if (i < userAnswerLower.Length && i < actualAnswerLower.Length)
            { 

                if (char.ToLower(userAnswerLower[i]) == char.ToLower(actualAnswerLower[i]))
                {
                    result += $"<span style='color: green;'>{actualAnswerLower[i]}</span>";
                }
                else
                {
                    result += $"<span style='color: red;'><u>{actualAnswerLower[i]}</u></span>";
                }
            }
            else if (i < userAnswerLower.Length)
            {
                result += $"<span style='color: purple;'><u>{actualAnswerLower[i]}</u></span>";
            }
            else if (actualAnswerLower[i] == ' ')
            {
                result += $"<span style='color: green;'>&nbsp;</span>";
            }
            else if (!char.IsLetter(actualAnswerLower[i]))
            {
                result += $"<span style='color: black;'><u>{actualAnswerLower[i]}</u></span>";
            }
            else
            {
                result += $"<span style='color: red;'><u>{actualAnswerLower[i]}</u></span>";
            }

        }
        
        return new MarkupString(result);
    }

}
